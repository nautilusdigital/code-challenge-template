version: '3.8'

services:
  postgres:
    image: postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: challenge
      POSTGRES_USER: challenge
      POSTGRES_PASSWORD: challenge
    ports:
      - '5431:5432'
    networks:
      - challenge
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U challenge -d challenge" ]
      interval: 10s
      timeout: 5s
      retries: 5


  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    volumes:
      - ./api:/usr/src/app
    ports:
      - '8080:8080'
    environment:
      - SHELL=/bin/bash
      - ENVIRONMENT=dev
      - PORT=8080
      - PROJECT=STR-CHALLENGE
      - DATABASE_ENGINE=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=challenge
      - DATABASE_PASSWORD=challenge
      - DATABASE_DATABASE=challenge
      - DATABASE_SCHEMA=public
      - DATABASE_URL=postgres://challenge:challenge@postgres:5432/challenge
      - APP_SECRET=secret
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      sh -c "npx prisma migrate deploy && npm run prisma:seed && npm run dev:ts"
    networks:
      - challenge

  app:
    build:
      context: ./app
      dockerfile: Dockerfile
    volumes:
      - ./app:/usr/src/app
    ports:
      - '3000:3000'
    depends_on:
      - api
    networks:
      - challenge

networks:
  challenge:

volumes:
  postgres_data:
